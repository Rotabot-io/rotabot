// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rotabot-io/rotabot/lib/db (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package mock_db -destination=mock_db/db.go . Repository
//
// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	db "github.com/rotabot-io/rotabot/lib/db"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateOrUpdateRota mocks base method.
func (m *MockRepository) CreateOrUpdateRota(arg0 context.Context, arg1 db.CreateOrUpdateRotaParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateRota", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateRota indicates an expected call of CreateOrUpdateRota.
func (mr *MockRepositoryMockRecorder) CreateOrUpdateRota(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateRota", reflect.TypeOf((*MockRepository)(nil).CreateOrUpdateRota), arg0, arg1)
}

// FindRotaByID mocks base method.
func (m *MockRepository) FindRotaByID(arg0 context.Context, arg1 string) (db.Rota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRotaByID", arg0, arg1)
	ret0, _ := ret[0].(db.Rota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRotaByID indicates an expected call of FindRotaByID.
func (mr *MockRepositoryMockRecorder) FindRotaByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRotaByID", reflect.TypeOf((*MockRepository)(nil).FindRotaByID), arg0, arg1)
}

// ListRotasByChannel mocks base method.
func (m *MockRepository) ListRotasByChannel(arg0 context.Context, arg1 db.ListRotasByChannelParams) ([]db.Rota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRotasByChannel", arg0, arg1)
	ret0, _ := ret[0].([]db.Rota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRotasByChannel indicates an expected call of ListRotasByChannel.
func (mr *MockRepositoryMockRecorder) ListRotasByChannel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRotasByChannel", reflect.TypeOf((*MockRepository)(nil).ListRotasByChannel), arg0, arg1)
}

// ListUserIDsByRotaID mocks base method.
func (m *MockRepository) ListUserIDsByRotaID(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserIDsByRotaID", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserIDsByRotaID indicates an expected call of ListUserIDsByRotaID.
func (mr *MockRepositoryMockRecorder) ListUserIDsByRotaID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserIDsByRotaID", reflect.TypeOf((*MockRepository)(nil).ListUserIDsByRotaID), arg0, arg1)
}

// UpdateRotaMembers mocks base method.
func (m *MockRepository) UpdateRotaMembers(arg0 context.Context, arg1 []db.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRotaMembers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRotaMembers indicates an expected call of UpdateRotaMembers.
func (mr *MockRepositoryMockRecorder) UpdateRotaMembers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRotaMembers", reflect.TypeOf((*MockRepository)(nil).UpdateRotaMembers), arg0, arg1)
}
