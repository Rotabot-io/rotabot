// Code generated by goa v3.12.3, DO NOT EDIT.
//
// Slack HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/rotabot-io/rotabot/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strconv"

	slack "github.com/rotabot-io/rotabot/gen/slack"
	goahttp "goa.design/goa/v3/http"
)

// BuildCommandsRequest instantiates a HTTP request object with method and path
// set to call the "Slack" service "Commands" endpoint
func (c *Client) BuildCommandsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CommandsSlackPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Slack", "Commands", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCommandsRequest returns an encoder for requests sent to the Slack
// Commands server.
func EncodeCommandsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*slack.Command)
		if !ok {
			return goahttp.ErrInvalidType("Slack", "Commands", "*slack.Command", v)
		}
		{
			head := p.Signature
			req.Header.Set("X-Slack-Signature", head)
		}
		{
			head := p.Timestamp
			headStr := strconv.FormatInt(head, 10)
			req.Header.Set("X-Slack-Request-Timestamp", headStr)
		}
		body := NewCommandsRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Slack", "Commands", err)
		}
		return nil
	}
}

// DecodeCommandsResponse returns a decoder for responses returned by the Slack
// Commands endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeCommandsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Slack", "Commands", resp.StatusCode, string(body))
		}
	}
}

// BuildEventsRequest instantiates a HTTP request object with method and path
// set to call the "Slack" service "Events" endpoint
func (c *Client) BuildEventsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EventsSlackPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Slack", "Events", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeEventsRequest returns an encoder for requests sent to the Slack Events
// server.
func EncodeEventsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*slack.Event)
		if !ok {
			return goahttp.ErrInvalidType("Slack", "Events", "*slack.Event", v)
		}
		{
			head := p.Signature
			req.Header.Set("X-Slack-Signature", head)
		}
		{
			head := p.Timestamp
			headStr := strconv.FormatInt(head, 10)
			req.Header.Set("X-Slack-Request-Timestamp", headStr)
		}
		body := NewEventsRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Slack", "Events", err)
		}
		return nil
	}
}

// DecodeEventsResponse returns a decoder for responses returned by the Slack
// Events endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeEventsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body EventsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Slack", "Events", err)
			}
			res := NewEventsEventResponseOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Slack", "Events", resp.StatusCode, string(body))
		}
	}
}

// BuildMessageActionsRequest instantiates a HTTP request object with method
// and path set to call the "Slack" service "MessageActions" endpoint
func (c *Client) BuildMessageActionsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MessageActionsSlackPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Slack", "MessageActions", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeMessageActionsRequest returns an encoder for requests sent to the
// Slack MessageActions server.
func EncodeMessageActionsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*slack.Action)
		if !ok {
			return goahttp.ErrInvalidType("Slack", "MessageActions", "*slack.Action", v)
		}
		{
			head := p.Signature
			req.Header.Set("X-Slack-Signature", head)
		}
		{
			head := p.Timestamp
			headStr := strconv.FormatInt(head, 10)
			req.Header.Set("X-Slack-Request-Timestamp", headStr)
		}
		body := NewMessageActionsRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Slack", "MessageActions", err)
		}
		return nil
	}
}

// DecodeMessageActionsResponse returns a decoder for responses returned by the
// Slack MessageActions endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeMessageActionsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body MessageActionsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Slack", "MessageActions", err)
			}
			res := NewMessageActionsActionResponseOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Slack", "MessageActions", resp.StatusCode, string(body))
		}
	}
}
