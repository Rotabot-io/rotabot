// Code generated by goa v3.13.2, DO NOT EDIT.
//
// Slack HTTP client CLI support package
//
// Command:
// $ goa gen github.com/rotabot-io/rotabot/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	slack "github.com/rotabot-io/rotabot/gen/slack"
	goa "goa.design/goa/v3/pkg"
)

// BuildCommandsPayload builds the payload for the Slack Commands endpoint from
// CLI flags.
func BuildCommandsPayload(slackCommandsBody string, slackCommandsSignature string, slackCommandsTimestamp string) (*slack.Command, error) {
	var err error
	var body CommandsRequestBody
	{
		err = json.Unmarshal([]byte(slackCommandsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"api_app_id\": \"Qui sequi quia consequatur quam.\",\n      \"channel_id\": \"Dolore similique.\",\n      \"channel_name\": \"Fugit sed quam pariatur voluptatibus natus consequatur.\",\n      \"command\": \"Eos voluptas.\",\n      \"enterprise_id\": \"Maxime autem eius architecto numquam.\",\n      \"enterprise_name\": \"Aliquam blanditiis ratione repellat.\",\n      \"is_enterprise_install\": false,\n      \"response_url\": \"Quas labore temporibus rerum.\",\n      \"team_domain\": \"Omnis quia cumque numquam delectus delectus.\",\n      \"team_id\": \"Cupiditate perferendis vel unde labore.\",\n      \"text\": \"Aspernatur atque explicabo eius sit quo.\",\n      \"token\": \"Velit perspiciatis.\",\n      \"trigger_id\": \"Eius dolorem.\",\n      \"user_id\": \"Sed eligendi repellendus accusamus.\",\n      \"user_name\": \"Voluptatem iure omnis.\"\n   }'")
		}
	}
	var signature string
	{
		signature = slackCommandsSignature
	}
	var timestamp int64
	{
		timestamp, err = strconv.ParseInt(slackCommandsTimestamp, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for timestamp, must be INT64")
		}
	}
	v := &slack.Command{
		Token:               body.Token,
		Command:             body.Command,
		Text:                body.Text,
		ResponseURL:         body.ResponseURL,
		TriggerID:           body.TriggerID,
		UserID:              body.UserID,
		UserName:            body.UserName,
		TeamID:              body.TeamID,
		TeamDomain:          body.TeamDomain,
		EnterpriseID:        body.EnterpriseID,
		EnterpriseName:      body.EnterpriseName,
		IsEnterpriseInstall: body.IsEnterpriseInstall,
		ChannelID:           body.ChannelID,
		ChannelName:         body.ChannelName,
		APIAppID:            body.APIAppID,
	}
	v.Signature = signature
	v.Timestamp = timestamp

	return v, nil
}

// BuildEventsPayload builds the payload for the Slack Events endpoint from CLI
// flags.
func BuildEventsPayload(slackEventsBody string, slackEventsSignature string, slackEventsTimestamp string) (*slack.Event, error) {
	var err error
	var body EventsRequestBody
	{
		err = json.Unmarshal([]byte(slackEventsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"api_app_id\": \"Neque blanditiis eum.\",\n      \"challenge\": \"Voluptatem est iste quam eaque.\",\n      \"event\": {\n         \"type\": \"Commodi molestiae similique dignissimos quia quas.\"\n      },\n      \"team_id\": \"Beatae exercitationem quo.\",\n      \"token\": \"Natus quo nostrum eaque eum ipsam voluptatum.\",\n      \"type\": \"Numquam qui facere hic est ea.\"\n   }'")
		}
	}
	var signature string
	{
		signature = slackEventsSignature
	}
	var timestamp int64
	{
		timestamp, err = strconv.ParseInt(slackEventsTimestamp, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for timestamp, must be INT64")
		}
	}
	v := &slack.Event{
		Token:     body.Token,
		TeamID:    body.TeamID,
		Challenge: body.Challenge,
		Type:      body.Type,
		APIAppID:  body.APIAppID,
	}
	if body.Event != nil {
		v.Event = &struct {
			Type *string
		}{
			Type: body.Event.Type,
		}
	}
	v.Signature = signature
	v.Timestamp = timestamp

	return v, nil
}

// BuildMessageActionsPayload builds the payload for the Slack MessageActions
// endpoint from CLI flags.
func BuildMessageActionsPayload(slackMessageActionsBody string, slackMessageActionsSignature string, slackMessageActionsTimestamp string) (*slack.Action, error) {
	var err error
	var body MessageActionsRequestBody
	{
		err = json.Unmarshal([]byte(slackMessageActionsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"payload\": \"TGFib3J1bSBjb25zZXF1YXR1ciBkb2xvcnVtLg==\"\n   }'")
		}
		if body.Payload == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("payload", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var signature string
	{
		signature = slackMessageActionsSignature
	}
	var timestamp int64
	{
		timestamp, err = strconv.ParseInt(slackMessageActionsTimestamp, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for timestamp, must be INT64")
		}
	}
	v := &slack.Action{
		Payload: body.Payload,
	}
	v.Signature = signature
	v.Timestamp = timestamp

	return v, nil
}
