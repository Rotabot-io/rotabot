// Code generated by goa v3.12.1, DO NOT EDIT.
//
// Slack HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/rotabot-io/rotabot/design

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"

	slack "github.com/rotabot-io/rotabot/gen/slack"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCommandsResponse returns an encoder for responses returned by the
// Slack Commands endpoint.
func EncodeCommandsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeCommandsRequest returns a decoder for requests sent to the Slack
// Commands endpoint.
func DecodeCommandsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CommandsRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			signature *string
			timestamp *int64
		)
		signatureRaw := r.Header.Get("X-Slack-Signature")
		if signatureRaw != "" {
			signature = &signatureRaw
		}
		{
			timestampRaw := r.Header.Get("X-Slack-Request-Timestamp")
			if timestampRaw != "" {
				v, err2 := strconv.ParseInt(timestampRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timestamp", timestampRaw, "integer"))
				}
				timestamp = &v
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewCommandsCommand(&body, signature, timestamp)

		return payload, nil
	}
}

// EncodeEventsResponse returns an encoder for responses returned by the Slack
// Events endpoint.
func EncodeEventsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*slack.EventResponse)
		enc := encoder(ctx, w)
		body := NewEventsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeEventsRequest returns a decoder for requests sent to the Slack Events
// endpoint.
func DecodeEventsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body EventsRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			signature *string
			timestamp *int64
		)
		signatureRaw := r.Header.Get("X-Slack-Signature")
		if signatureRaw != "" {
			signature = &signatureRaw
		}
		{
			timestampRaw := r.Header.Get("X-Slack-Request-Timestamp")
			if timestampRaw != "" {
				v, err2 := strconv.ParseInt(timestampRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("timestamp", timestampRaw, "integer"))
				}
				timestamp = &v
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewEventsEvent(&body, signature, timestamp)

		return payload, nil
	}
}
