// Code generated by goa v3.14.0, DO NOT EDIT.
//
// Rotabot HTTP client CLI support package
//
// Command:
// $ goa gen github.com/rotabot-io/rotabot/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	slackc "github.com/rotabot-io/rotabot/gen/http/slack/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `slack (commands|events|message-actions)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` slack commands --body '{
      "api_app_id": "Qui sequi quia consequatur quam.",
      "channel_id": "Dolore similique.",
      "channel_name": "Fugit sed quam pariatur voluptatibus natus consequatur.",
      "command": "Eos voluptas.",
      "enterprise_id": "Maxime autem eius architecto numquam.",
      "enterprise_name": "Aliquam blanditiis ratione repellat.",
      "is_enterprise_install": false,
      "response_url": "Quas labore temporibus rerum.",
      "team_domain": "Omnis quia cumque numquam delectus delectus.",
      "team_id": "Cupiditate perferendis vel unde labore.",
      "text": "Aspernatur atque explicabo eius sit quo.",
      "token": "Velit perspiciatis.",
      "trigger_id": "Eius dolorem.",
      "user_id": "Sed eligendi repellendus accusamus.",
      "user_name": "Voluptatem iure omnis."
   }' --signature "Vitae dolore repellat dignissimos eos alias." --timestamp 4583469100588669182` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		slackFlags = flag.NewFlagSet("slack", flag.ContinueOnError)

		slackCommandsFlags         = flag.NewFlagSet("commands", flag.ExitOnError)
		slackCommandsBodyFlag      = slackCommandsFlags.String("body", "REQUIRED", "")
		slackCommandsSignatureFlag = slackCommandsFlags.String("signature", "REQUIRED", "")
		slackCommandsTimestampFlag = slackCommandsFlags.String("timestamp", "REQUIRED", "")

		slackEventsFlags         = flag.NewFlagSet("events", flag.ExitOnError)
		slackEventsBodyFlag      = slackEventsFlags.String("body", "REQUIRED", "")
		slackEventsSignatureFlag = slackEventsFlags.String("signature", "REQUIRED", "")
		slackEventsTimestampFlag = slackEventsFlags.String("timestamp", "REQUIRED", "")

		slackMessageActionsFlags         = flag.NewFlagSet("message-actions", flag.ExitOnError)
		slackMessageActionsBodyFlag      = slackMessageActionsFlags.String("body", "REQUIRED", "")
		slackMessageActionsSignatureFlag = slackMessageActionsFlags.String("signature", "REQUIRED", "")
		slackMessageActionsTimestampFlag = slackMessageActionsFlags.String("timestamp", "REQUIRED", "")
	)
	slackFlags.Usage = slackUsage
	slackCommandsFlags.Usage = slackCommandsUsage
	slackEventsFlags.Usage = slackEventsUsage
	slackMessageActionsFlags.Usage = slackMessageActionsUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "slack":
			svcf = slackFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "slack":
			switch epn {
			case "commands":
				epf = slackCommandsFlags

			case "events":
				epf = slackEventsFlags

			case "message-actions":
				epf = slackMessageActionsFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "slack":
			c := slackc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "commands":
				endpoint = c.Commands()
				data, err = slackc.BuildCommandsPayload(*slackCommandsBodyFlag, *slackCommandsSignatureFlag, *slackCommandsTimestampFlag)
			case "events":
				endpoint = c.Events()
				data, err = slackc.BuildEventsPayload(*slackEventsBodyFlag, *slackEventsSignatureFlag, *slackEventsTimestampFlag)
			case "message-actions":
				endpoint = c.MessageActions()
				data, err = slackc.BuildMessageActionsPayload(*slackMessageActionsBodyFlag, *slackMessageActionsSignatureFlag, *slackMessageActionsTimestampFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// slackUsage displays the usage of the slack command and its subcommands.
func slackUsage() {
	fmt.Fprintf(os.Stderr, `Slack api for interacting with slack commands, actions, events etc.
Usage:
    %[1]s [globalflags] slack COMMAND [flags]

COMMAND:
    commands: Commands implements Commands.
    events: Events implements Events.
    message-actions: MessageActions implements MessageActions.

Additional help:
    %[1]s slack COMMAND --help
`, os.Args[0])
}
func slackCommandsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] slack commands -body JSON -signature STRING -timestamp INT64

Commands implements Commands.
    -body JSON: 
    -signature STRING: 
    -timestamp INT64: 

Example:
    %[1]s slack commands --body '{
      "api_app_id": "Qui sequi quia consequatur quam.",
      "channel_id": "Dolore similique.",
      "channel_name": "Fugit sed quam pariatur voluptatibus natus consequatur.",
      "command": "Eos voluptas.",
      "enterprise_id": "Maxime autem eius architecto numquam.",
      "enterprise_name": "Aliquam blanditiis ratione repellat.",
      "is_enterprise_install": false,
      "response_url": "Quas labore temporibus rerum.",
      "team_domain": "Omnis quia cumque numquam delectus delectus.",
      "team_id": "Cupiditate perferendis vel unde labore.",
      "text": "Aspernatur atque explicabo eius sit quo.",
      "token": "Velit perspiciatis.",
      "trigger_id": "Eius dolorem.",
      "user_id": "Sed eligendi repellendus accusamus.",
      "user_name": "Voluptatem iure omnis."
   }' --signature "Vitae dolore repellat dignissimos eos alias." --timestamp 4583469100588669182
`, os.Args[0])
}

func slackEventsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] slack events -body JSON -signature STRING -timestamp INT64

Events implements Events.
    -body JSON: 
    -signature STRING: 
    -timestamp INT64: 

Example:
    %[1]s slack events --body '{
      "api_app_id": "Neque blanditiis eum.",
      "challenge": "Voluptatem est iste quam eaque.",
      "event": {
         "type": "Commodi molestiae similique dignissimos quia quas."
      },
      "team_id": "Beatae exercitationem quo.",
      "token": "Natus quo nostrum eaque eum ipsam voluptatum.",
      "type": "Numquam qui facere hic est ea."
   }' --signature "Fugit ex qui autem maxime." --timestamp 1620146830616195276
`, os.Args[0])
}

func slackMessageActionsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] slack message-actions -body JSON -signature STRING -timestamp INT64

MessageActions implements MessageActions.
    -body JSON: 
    -signature STRING: 
    -timestamp INT64: 

Example:
    %[1]s slack message-actions --body '{
      "payload": "TGFib3J1bSBjb25zZXF1YXR1ciBkb2xvcnVtLg=="
   }' --signature "Sit reprehenderit placeat molestias repudiandae quod id." --timestamp 3232366975570777412
`, os.Args[0])
}
