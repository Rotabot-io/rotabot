// Code generated by goa v3.12.4, DO NOT EDIT.
//
// Slack client
//
// Command:
// $ goa gen github.com/rotabot-io/rotabot/design

package slack

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "Slack" service client.
type Client struct {
	CommandsEndpoint       goa.Endpoint
	EventsEndpoint         goa.Endpoint
	MessageActionsEndpoint goa.Endpoint
}

// NewClient initializes a "Slack" service client given the endpoints.
func NewClient(commands, events, messageActions goa.Endpoint) *Client {
	return &Client{
		CommandsEndpoint:       commands,
		EventsEndpoint:         events,
		MessageActionsEndpoint: messageActions,
	}
}

// Commands calls the "Commands" endpoint of the "Slack" service.
func (c *Client) Commands(ctx context.Context, p *Command) (err error) {
	_, err = c.CommandsEndpoint(ctx, p)
	return
}

// Events calls the "Events" endpoint of the "Slack" service.
func (c *Client) Events(ctx context.Context, p *Event) (res *EventResponse, err error) {
	var ires any
	ires, err = c.EventsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*EventResponse), nil
}

// MessageActions calls the "MessageActions" endpoint of the "Slack" service.
func (c *Client) MessageActions(ctx context.Context, p *Action) (res *ActionResponse, err error) {
	var ires any
	ires, err = c.MessageActionsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*ActionResponse), nil
}
