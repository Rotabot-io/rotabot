// Code generated by goa v3.14.0, DO NOT EDIT.
//
// Slack endpoints
//
// Command:
// $ goa gen github.com/rotabot-io/rotabot/design

package slack

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "Slack" service endpoints.
type Endpoints struct {
	Commands       goa.Endpoint
	Events         goa.Endpoint
	MessageActions goa.Endpoint
}

// NewEndpoints wraps the methods of the "Slack" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Commands:       NewCommandsEndpoint(s),
		Events:         NewEventsEndpoint(s),
		MessageActions: NewMessageActionsEndpoint(s),
	}
}

// Use applies the given middleware to all the "Slack" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Commands = m(e.Commands)
	e.Events = m(e.Events)
	e.MessageActions = m(e.MessageActions)
}

// NewCommandsEndpoint returns an endpoint function that calls the method
// "Commands" of service "Slack".
func NewCommandsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*Command)
		return nil, s.Commands(ctx, p)
	}
}

// NewEventsEndpoint returns an endpoint function that calls the method
// "Events" of service "Slack".
func NewEventsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*Event)
		return s.Events(ctx, p)
	}
}

// NewMessageActionsEndpoint returns an endpoint function that calls the method
// "MessageActions" of service "Slack".
func NewMessageActionsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*Action)
		return s.MessageActions(ctx, p)
	}
}
